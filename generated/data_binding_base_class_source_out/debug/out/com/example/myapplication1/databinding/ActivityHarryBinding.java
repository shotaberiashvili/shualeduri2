// Generated by view binder compiler. Do not edit!
package com.example.myapplication1.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.myapplication1.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityHarryBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView question1;

  @NonNull
  public final Button rightharry1;

  @NonNull
  public final Button wrongharry1;

  @NonNull
  public final Button wrongharry2;

  @NonNull
  public final Button wrongharry3;

  private ActivityHarryBinding(@NonNull ConstraintLayout rootView, @NonNull TextView question1,
      @NonNull Button rightharry1, @NonNull Button wrongharry1, @NonNull Button wrongharry2,
      @NonNull Button wrongharry3) {
    this.rootView = rootView;
    this.question1 = question1;
    this.rightharry1 = rightharry1;
    this.wrongharry1 = wrongharry1;
    this.wrongharry2 = wrongharry2;
    this.wrongharry3 = wrongharry3;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityHarryBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityHarryBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_harry, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityHarryBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.question1;
      TextView question1 = ViewBindings.findChildViewById(rootView, id);
      if (question1 == null) {
        break missingId;
      }

      id = R.id.rightharry1;
      Button rightharry1 = ViewBindings.findChildViewById(rootView, id);
      if (rightharry1 == null) {
        break missingId;
      }

      id = R.id.wrongharry1;
      Button wrongharry1 = ViewBindings.findChildViewById(rootView, id);
      if (wrongharry1 == null) {
        break missingId;
      }

      id = R.id.wrongharry2;
      Button wrongharry2 = ViewBindings.findChildViewById(rootView, id);
      if (wrongharry2 == null) {
        break missingId;
      }

      id = R.id.wrongharry3;
      Button wrongharry3 = ViewBindings.findChildViewById(rootView, id);
      if (wrongharry3 == null) {
        break missingId;
      }

      return new ActivityHarryBinding((ConstraintLayout) rootView, question1, rightharry1,
          wrongharry1, wrongharry2, wrongharry3);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
